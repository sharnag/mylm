# BEGIN FUNCTION
yname <- as.character(formula[[2]])
tryCatch(
expr={yvec <- data[,yname]},
error = function(e){stop('The response variable is undefined')}
)
xmat <- model.matrix(formula, data=data)
df.residual <- nrow(xmat)-ncol(xmat)
xxinv <- solve(t(xmat)%*%xmat)
coef <- as.vector(xxinv%*%t(xmat)%*%yvec)
names(coef) <- colnames(xmat)
yfit <- as.vector(xmat%*%coef)
residuals <- yvec-yfit
sigma <- sqrt(sum(residuals^2)/df.residual)
vcov <- sigma^2*xxinv
mylmobject <- list(call=match.call(),
formula=formula, data=data, yname=yname,
coef=coef, sigma=sigma, vcov=vcov,
npar=ncol(xmat), df.residual=df.residual,
residuals=residuals,
fitted.values=yfit)
class(mylmobject) <- "mylm"
return(mylmobject)
}
mylm2 <- function(formula, data=NULL, subset=NULL) {
# Check if formula is null
if(is.null(formula)){
} # if null, system error thrown before continuing
# "argument \"formula\" is missing, with no default"
# Try to coerce the formula argument as a object of type formula
# This should succeed for formula objects and strings of the correct format
tryCatch(
expr = {formula <-as.formula(formula)},
error = function(e){stop('The argument \"formula\" is not a valid formula')},
warning = function(w){stop('The argument \"formula\" is not a valid formula')}
)
# If data argument is NULL, then check for environment variables based on formula
if(is.null(data)){
# create data frame using environment variables based on formula
# reuse functionality in model matrix, then convert to a dataframe object
tryCatch(
expr = {data <- data.frame(model.matrix(formula,data=environment(formula)))},
error = function(e){stop('There was an error generating the dataframe from the environment variables.')}
)
# add response variable to the dataframe
data$y <- eval(parse(text = formula[[2]])) # add response variable to the dataframe
colnames(data)[which(colnames(data) == 'y')] <- format(form_obj[[2]])
}
# Check if data argument is a list or dataframe object
if(!is.data.frame(data) & !is.list(data)){
stop('The argument \"data\" is not a dataframe or list object')
}
if(is.list(data)){
# Convert list object to a dataframe
data <- as.data.frame(data)
}
# TESTING SUBSET
if(!is.null(subset)){
if(!is.vector(subset)){
stop('The argument \"subset\" is not a vector')
}
if(is.vector(subset) & !is.numeric(subset) & !is.logical(subset)){
stop('The argument \"subset\" is not a numerical or logical vector')
}
# check subset is in valid range
if(is.numeric(subset)){
if(min(subset)<0 ||max(subset) > nrow(data)){
stop('The subset is out of range')
}
}
data <- data[subset,]
}
# BEGIN FUNCTION
yname <- as.character(formula[[2]])
tryCatch(
expr={yvec <- data[,yname]},
error = function(e){stop('The response variable is undefined')}
)
xmat <- model.matrix(formula, data=data)
df.residual <- nrow(xmat)-ncol(xmat)
xxinv <- solve(t(xmat)%*%xmat)
coef <- as.vector(xxinv%*%t(xmat)%*%yvec)
names(coef) <- colnames(xmat)
yfit <- as.vector(xmat%*%coef)
residuals <- yvec-yfit
sigma <- sqrt(sum(residuals^2)/df.residual)
vcov <- sigma^2*xxinv
mylmobject <- list(call=match.call(),
formula=formula, data=data, yname=yname,
coef=coef, sigma=sigma, vcov=vcov,
npar=ncol(xmat), df.residual=df.residual,
residuals=residuals,
fitted.values=yfit)
class(mylmobject) <- "mylm"
return(mylmobject)
}
mylm2 <- function(formula, data=NULL, subset=NULL) {
# Check if formula is null
if(is.null(formula)){
} # if null, system error thrown before continuing
# "argument \"formula\" is missing, with no default"
# Try to coerce the formula argument as a object of type formula
# This should succeed for formula objects and strings of the correct format
tryCatch(
expr = {formula <-as.formula(formula)},
error = function(e){stop('The argument \"formula\" is not a valid formula')},
warning = function(w){stop('The argument \"formula\" is not a valid formula')}
)
# If data argument is NULL, then check for environment variables based on formula
if(is.null(data)){
# create data frame using environment variables based on formula
# reuse functionality in model matrix, then convert to a dataframe object
tryCatch(
expr = {data <- data.frame(model.matrix(formula,data=environment(formula)))},
error = function(e){stop('There was an error generating the dataframe from the environment variables.')}
)
# add response variable to the dataframe
data$y <- eval(parse(text = formula[[2]])) # add response variable to the dataframe
colnames(data)[which(colnames(data) == 'y')] <- format(formula[[2]])
}
# Check if data argument is a list or dataframe object
if(!is.data.frame(data) & !is.list(data)){
stop('The argument \"data\" is not a dataframe or list object')
}
if(is.list(data)){
# Convert list object to a dataframe
data <- as.data.frame(data)
}
# TESTING SUBSET
if(!is.null(subset)){
if(!is.vector(subset)){
stop('The argument \"subset\" is not a vector')
}
if(is.vector(subset) & !is.numeric(subset) & !is.logical(subset)){
stop('The argument \"subset\" is not a numerical or logical vector')
}
# check subset is in valid range
if(is.numeric(subset)){
if(min(subset)<0 ||max(subset) > nrow(data)){
stop('The subset is out of range')
}
}
data <- data[subset,]
}
# BEGIN FUNCTION
yname <- as.character(formula[[2]])
tryCatch(
expr={yvec <- data[,yname]},
error = function(e){stop('The response variable is undefined')}
)
xmat <- model.matrix(formula, data=data)
df.residual <- nrow(xmat)-ncol(xmat)
xxinv <- solve(t(xmat)%*%xmat)
coef <- as.vector(xxinv%*%t(xmat)%*%yvec)
names(coef) <- colnames(xmat)
yfit <- as.vector(xmat%*%coef)
residuals <- yvec-yfit
sigma <- sqrt(sum(residuals^2)/df.residual)
vcov <- sigma^2*xxinv
mylmobject <- list(call=match.call(),
formula=formula, data=data, yname=yname,
coef=coef, sigma=sigma, vcov=vcov,
npar=ncol(xmat), df.residual=df.residual,
residuals=residuals,
fitted.values=yfit)
class(mylmobject) <- "mylm"
return(mylmobject)
}
mylm2 <- function(formula, data=NULL, subset=NULL) {
# Check if formula is null
if(is.null(formula)){
} # if null, system error thrown before continuing
# "argument \"formula\" is missing, with no default"
# Try to coerce the formula argument as a object of type formula
# This should succeed for formula objects and strings of the correct format
tryCatch(
expr = {formula <-as.formula(formula)},
error = function(e){stop('The argument \"formula\" is not a valid formula')},
warning = function(w){stop('The argument \"formula\" is not a valid formula')}
)
# If data argument is NULL, then check for environment variables based on formula
if(is.null(data)){
# create data frame using environment variables based on formula
# reuse functionality in model matrix, then convert to a dataframe object
tryCatch(
expr = {data <- data.frame(model.matrix(formula,data=environment(formula)))},
error = function(e){stop('There was an error generating the dataframe from the environment variables.')}
)
# add response variable to the dataframe
data$y <- eval(parse(text = formula[[2]])) # add response variable to the dataframe
colnames(data)[which(colnames(data) == 'y')] <- format(formula[[2]])
}
# Check if data argument is a list or dataframe object
if(!is.data.frame(data) & !is.list(data)){
stop('The argument \"data\" is not a dataframe or list object')
}
if(is.list(data)){
# Convert list object to a dataframe
data <- as.data.frame(data)
}
# TESTING SUBSET
if(!is.null(subset)){
if(!is.vector(subset)){
stop('The argument \"subset\" is not a vector')
}
if(is.vector(subset) & !is.numeric(subset) & !is.logical(subset)){
stop('The argument \"subset\" is not a numerical or logical vector')
}
# check subset is in valid range
if(is.numeric(subset)){
if(min(subset)<0 ||max(subset) > nrow(data)){
stop('The subset is out of range')
}
}
data <- data[subset,]
}
# BEGIN FUNCTION
yname <- as.character(formula[[2]])
tryCatch(
expr={yvec <- data[,yname]},
error = function(e){stop('The response variable is undefined')}
)
xmat <- model.matrix(formula, data=data)
df.residual <- nrow(xmat)-ncol(xmat)
xxinv <- solve(t(xmat)%*%xmat)
coef <- as.vector(xxinv%*%t(xmat)%*%yvec)
names(coef) <- colnames(xmat)
yfit <- as.vector(xmat%*%coef)
residuals <- yvec-yfit
sigma <- sqrt(sum(residuals^2)/df.residual)
vcov <- sigma^2*xxinv
mylmobject <- list(call=match.call(),
formula=formula, data=data, yname=yname,
coef=coef, sigma=sigma, vcov=vcov,
npar=ncol(xmat), df.residual=df.residual,
residuals=residuals,
fitted.values=yfit)
class(mylmobject) <- "mylm"
return(mylmobject)
}
test_file("tests/testthat/test_mylm.R")
test_file("tests/testthat/test_mylm.R")
mylm2(formula=mpg ~ wt + disp + hp)
test_file("tests/testthat/test_mylm.R")
result$residuals[[2]]
result$residuals
result_lm$residuals
result_lm$residuals[]
result_lm$residuals[[]]
type(result_lm$residuals)
class(result_lm$residuals)
test_file("tests/testthat/test_mylm.R")
############### ADDITIONAL FUNCTIONS ###############
summary(result)
test_file("tests/testthat/test_mylm.R")
test_file("tests/testthat/test_mylm.R")
vcov(result)
confint(result)
print(result)
plot(result)
test_file("tests/testthat/test_mylm.R")
test_file("tests/testthat/test_mylm.R")
test_file("tests/testthat/test_mylm.R")
test_file("tests/testthat/test_mylm.R")
test_file("tests/testthat/test_mylm.R")
test_file("tests/testthat/test_mylm.R")
test_file("tests/testthat/test_mylm.R")
expect_no_warning(1 + 1)
test_file("tests/testthat/test_mylm.R")
devtools::test()
mylm <- function(formula, data, subset=NULL) {
# Check if "formula" argument is null
if(is.null(formula)){
} # if null, system error thrown before continuing - "argument \"formula\" is missing, with no default"
# Try to coerce the "formula" argument to an object of type formula
# This should succeed for formula objects and strings of the correct format
tryCatch(
expr = {formula <-as.formula(formula)},
error = function(e){stop('The argument \"formula\" is not a valid formula')},
warning = function(w){stop('The argument \"formula\" is not a valid formula')}
)
# Check if "data" argument is null
if(is.null(data)){
# Create data frame using environment variables based on formula by
# re-using functionality in model matrix, then convert to a new dataframe object named "data"
tryCatch(
expr = {data <- data.frame(model.matrix(formula,data=environment(formula)))},
error = function(e){stop('There was an error generating the dataframe from the environment variables.')}
)
# Add the response variable to the dataframe
data$y <- eval(parse(text = formula[[2]]))
colnames(data)[which(colnames(data) == 'y')] <- format(formula[[2]])
}
# Check if "data" argument is a list or dataframe object
if(!is.data.frame(data) & !is.list(data)){
stop('The argument \"data\" is not a dataframe or list object')
}
# Convert list object to a dataframe
if(is.list(data)){
data <- as.data.frame(data)
}
# Check the "subset" argument is a numerical or logical vector
if(!is.null(subset)){
if(!is.vector(subset)){
stop('The argument \"subset\" is not a vector')
}
if(is.vector(subset) & !is.numeric(subset) & !is.logical(subset)){
stop('The argument \"subset\" is not a numerical or logical vector')
}
# Check "subset" defined is in valid range
if(is.numeric(subset)){
if(min(subset)<0 ||max(subset) > nrow(data)){
stop('The subset is out of range')
}
}
data <- data[subset,]
}
# Begin original function
yname <- as.character(formula[[2]])
tryCatch(
expr={yvec <- data[,yname]},
error = function(e){stop('The response variable is undefined')}
)
xmat <- model.matrix(formula, data=data)
df.residual <- nrow(xmat)-ncol(xmat)
xxinv <- solve(t(xmat)%*%xmat)
coef <- as.vector(xxinv%*%t(xmat)%*%yvec)
names(coef) <- colnames(xmat)
yfit <- as.vector(xmat%*%coef)
residuals <- yvec-yfit
sigma <- sqrt(sum(residuals^2)/df.residual)
vcov <- sigma^2*xxinv
mylmobject <- list(call=match.call(),
formula=formula, data=data, yname=yname,
coef=coef, sigma=sigma, vcov=vcov,
npar=ncol(xmat), df.residual=df.residual,
residuals=residuals,
fitted.values=yfit)
class(mylmobject) <- "mylm"
return(mylmobject)
}
test_file("tests/testthat/test_mylm.R")
mylm <- function(formula, data=NULL, subset=NULL) {
# Check if "formula" argument is null
if(is.null(formula)){
} # if null, system error thrown before continuing - "argument \"formula\" is missing, with no default"
# Try to coerce the "formula" argument to an object of type formula
# This should succeed for formula objects and strings of the correct format
tryCatch(
expr = {formula <-as.formula(formula)},
error = function(e){stop('The argument \"formula\" is not a valid formula')},
warning = function(w){stop('The argument \"formula\" is not a valid formula')}
)
# Check if "data" argument is null
if(is.null(data)){
# Create data frame using environment variables based on formula by
# re-using functionality in model matrix, then convert to a new dataframe object named "data"
tryCatch(
expr = {data <- data.frame(model.matrix(formula,data=environment(formula)))},
error = function(e){stop('There was an error generating the dataframe from the environment variables.')}
)
# Add the response variable to the dataframe
data$y <- eval(parse(text = formula[[2]]))
colnames(data)[which(colnames(data) == 'y')] <- format(formula[[2]])
}
# Check if "data" argument is a list or dataframe object
if(!is.data.frame(data) & !is.list(data)){
stop('The argument \"data\" is not a dataframe or list object')
}
# Convert list object to a dataframe
if(is.list(data)){
data <- as.data.frame(data)
}
# Check the "subset" argument is a numerical or logical vector
if(!is.null(subset)){
if(!is.vector(subset)){
stop('The argument \"subset\" is not a vector')
}
if(is.vector(subset) & !is.numeric(subset) & !is.logical(subset)){
stop('The argument \"subset\" is not a numerical or logical vector')
}
# Check "subset" defined is in valid range
if(is.numeric(subset)){
if(min(subset)<0 ||max(subset) > nrow(data)){
stop('The subset is out of range')
}
}
data <- data[subset,]
}
# Begin original function
yname <- as.character(formula[[2]])
tryCatch(
expr={yvec <- data[,yname]},
error = function(e){stop('The response variable is undefined')}
)
xmat <- model.matrix(formula, data=data)
df.residual <- nrow(xmat)-ncol(xmat)
xxinv <- solve(t(xmat)%*%xmat)
coef <- as.vector(xxinv%*%t(xmat)%*%yvec)
names(coef) <- colnames(xmat)
yfit <- as.vector(xmat%*%coef)
residuals <- yvec-yfit
sigma <- sqrt(sum(residuals^2)/df.residual)
vcov <- sigma^2*xxinv
mylmobject <- list(call=match.call(),
formula=formula, data=data, yname=yname,
coef=coef, sigma=sigma, vcov=vcov,
npar=ncol(xmat), df.residual=df.residual,
residuals=residuals,
fitted.values=yfit)
class(mylmobject) <- "mylm"
return(mylmobject)
}
test_file("tests/testthat/test_mylm.R")
getwd()
#library(devtools)
install("mylm")
library(devtools)
install("mylm")
#install("mylm")
require("mylm")
library(mylm)
library(testthat)
devtools::test()
test_file("tests/testthat/test_mylm.R")
testthat::test_file("tests/testthat/test_mylm.R")
mylm <- function(formula, data=NULL, subset=NULL) {
# Check if "formula" argument is null
if(is.null(formula)){
} # if null, system error thrown before continuing - "argument \"formula\" is missing, with no default"
# Try to coerce the "formula" argument to an object of type formula
# This should succeed for formula objects and strings of the correct format
tryCatch(
expr = {formula <-as.formula(formula)},
error = function(e){stop('The argument \"formula\" is not a valid formula')},
warning = function(w){stop('The argument \"formula\" is not a valid formula')}
)
# Check if "data" argument is null
if(is.null(data)){
# Create data frame using environment variables based on formula by
# re-using functionality in model matrix, then convert to a new dataframe object named "data"
tryCatch(
expr = {data <- data.frame(model.matrix(formula,data=environment(formula)))},
error = function(e){stop('There was an error generating the dataframe from the environment variables.')}
)
# Add the response variable to the dataframe
data$y <- eval(parse(text = formula[[2]]))
colnames(data)[which(colnames(data) == 'y')] <- format(formula[[2]])
}
# Check if "data" argument is a list or dataframe object
if(!is.data.frame(data) & !is.list(data)){
stop('The argument \"data\" is not a dataframe or list object')
}
# Convert list object to a dataframe
if(is.list(data)){
data <- as.data.frame(data)
}
# Check the "subset" argument is a numerical or logical vector
if(!is.null(subset)){
if(!is.vector(subset)){
stop('The argument \"subset\" is not a vector')
}
if(is.vector(subset) & !is.numeric(subset) & !is.logical(subset)){
stop('The argument \"subset\" is not a numerical or logical vector')
}
# Check "subset" defined is in valid range
if(is.numeric(subset)){
if(min(subset)<0 ||max(subset) > nrow(data)){
stop('The subset is out of range')
}
}
data <- data[subset,]
}
# Begin original function
yname <- as.character(formula[[2]])
tryCatch(
expr={yvec <- data[,yname]},
error = function(e){stop('The response variable is undefined')}
)
xmat <- model.matrix(formula, data=data)
df.residual <- nrow(xmat)-ncol(xmat)
xxinv <- solve(t(xmat)%*%xmat)
coef <- as.vector(xxinv%*%t(xmat)%*%yvec)
names(coef) <- colnames(xmat)
yfit <- as.vector(xmat%*%coef)
residuals <- yvec-yfit
sigma <- sqrt(sum(residuals^2)/df.residual)
vcov <- sigma^2*xxinv
mylmobject <- list(call=match.call(),
formula=formula, data=data, yname=yname,
coef=coef, sigma=sigma, vcov=vcov,
npar=ncol(xmat), df.residual=df.residual,
residuals=residuals,
fitted.values=yfit)
class(mylmobject) <- "mylm"
return(mylmobject)
}
testthat::test_file("tests/testthat/test_mylm.R")
# Check object of expected class mylm is created
expect_s3_class(result, "mylm")
# Create mylm and lm objects from the same data
result <- mylm(formula=mpg ~ wt + disp + hp, data=mtcars)
# Check object of expected class mylm is created
expect_s3_class(result, "mylm")
expect_silent(mylm(formula=mpg ~ wt + disp + hp))
testthat::test_file("tests/testthat/test_mylm.R")
devtools::test() #unable to load shared object '
library(mylm)
test_check("mylm")
test_dir()
test_check("mylm")
devtools::test() #unable to load shared object '
